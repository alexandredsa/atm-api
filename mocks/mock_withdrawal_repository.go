// Code generated by MockGen. DO NOT EDIT.
// Source: repositories/withdrawal/base_repository.go

// Package mock_withdrawal is a generated GoMock package.
package mock_withdrawal

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockBaseRepository is a mock of BaseRepository interface
type MockBaseRepository struct {
	ctrl     *gomock.Controller
	recorder *MockBaseRepositoryMockRecorder
}

// MockBaseRepositoryMockRecorder is the mock recorder for MockBaseRepository
type MockBaseRepositoryMockRecorder struct {
	mock *MockBaseRepository
}

// NewMockBaseRepository creates a new mock instance
func NewMockBaseRepository(ctrl *gomock.Controller) *MockBaseRepository {
	mock := &MockBaseRepository{ctrl: ctrl}
	mock.recorder = &MockBaseRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBaseRepository) EXPECT() *MockBaseRepositoryMockRecorder {
	return m.recorder
}

// GetAvailableBanknotesValues mocks base method
func (m *MockBaseRepository) GetAvailableBanknotesValues() []int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvailableBanknotesValues")
	ret0, _ := ret[0].([]int)
	return ret0
}

// GetAvailableBanknotesValues indicates an expected call of GetAvailableBanknotesValues
func (mr *MockBaseRepositoryMockRecorder) GetAvailableBanknotesValues() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvailableBanknotesValues", reflect.TypeOf((*MockBaseRepository)(nil).GetAvailableBanknotesValues))
}
